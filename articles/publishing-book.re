={publishing-book} 書籍を発行する

#@# prh:disable
ついにこの時が来ました。書籍を世に送り出します！
あなたの思い描いた技術書は完成しましたか？締め切り間際にこのページを開いているのでしょうか。
もし間に合わなくても筆者と本書のことは悪く思わないでください！やっていきましょう。

本章では書籍を発行する方法を学びます。

 * 印刷所へ入稿する（紙）
 * 電子書籍で発行する（PDF）
 * リフロー型の電子書籍で発行する（EPUB）

紙を印刷する場合は各印刷所でデータのフォーマットや記載内容のルールが異なります。
また電子書籍の場合、紙面とレイアウトが異なっていたり、文字サイズを変更できる（リフロー型とよばれる書籍）メリットがあります。
いずれも見やすさや検索性で特徴がありますね。TechBoosterでは紙面も電子書籍も両方をつくって配っています。

本書で紹介しているRe:VIEWテンプレートリポジトリおよび本書リポジトリの制作手法で作った技術書の本文は次の印刷所で実績があります。
入稿を保証するものではありませんが、そのまま使う分には多くの実績があるので安心してください。他の印刷所への入稿実績も探せば見つかるはずです！

 * 日光企画：@<href>{http://www.nikko-pc.com/}
 * ねこのしっぽ：@<href>{https://www.shippo.co.jp/neko/}

日光企画とねこのしっぽは技術書典のバックアップ印刷所です。入稿のサポート、専用締切の提供をはじめオフライン会場当日の搬入を印刷所が行います。
細かい話をすると印刷所によって料金プランや得意分野が違いますが、おいおい慣れてから考えればいいでしょう。はじめて利用するにはバックアップ印刷所はよい選択肢です。

== 入稿のための最終出力を作る

印刷所へ最終的な印刷用データを渡すことを@<kw>{入稿,にゅうこう}と呼びます。
本節では入稿手順を解説しますが入稿には専門的な注意点も多いため専門用語は出てきたタイミングで説明を補います。

@<chapref>{writing-book}で述べたとおり、同人誌向けのRe:VIEWプロジェクト構成を使用する前提です。TechBoosterのテンプレートリポジトリをCloneしている場合、@<kw>{ノンブル,通し番号}のような同人誌特有の問題を回避できます。

#@# prh:disable
 * @<href>{https://github.com/TechBooster/ReVIEW-Template}

ここからはTechBoosterが日光企画へ入稿した場合の手順を解説していきます。
実のところ入稿方法は、これさえ知っていれば完璧といったスタンダードが存在していません。有名なIT企業のような大きな印刷所はなく、中小の企業が同人誌を支えており、
そのため印刷工程やチェック項目が印刷所ごとに違ってきます。

たとえば表紙データは印刷所ごとにテンプレートが異なったり、入稿用本文に@<kw>{トンボ,紙を断裁する位置の目印}がないと受け付けてもらえなかったり、
利用ソフトウェアのバージョン指定があったり、違いはさまざまです。かといって、すべてを説明すると全体を理解する前に頭がパンクしてしまいます。
今回は日光企画さんの事例に限って入稿に必要な知識をみていきましょう。実際には入稿予定の印刷所が指定するフォーマット、注意点を熟読して挑んでください。

とはいえ困ったことばかりではありません。
繰り返すようにテンプレートリポジトリを使っている限り、大きな問題にはあいませんし、印刷所のスタッフさんも表紙や本文を目で確認してくれるため
誤字や脱字、はみ出しや印刷の問題が見つかって教えてくれるボーナスイベントも発生します。安心してください。

注文に先立って知っておく知識として、部数に応じて適した印刷手法が異なります。

 : オンデマンド印刷
   ～200部の小ロット印刷。印刷に使う版を作らないので手軽ですが単価は高めです

 : オフセット印刷
   200部〜の印刷に利用。版を作る手法で、ロット数に応じて単価が安くなります

オンデマンド印刷はざっくりと高級なコピー機をつかった印刷手法です。このふたつを比べると一般的にオフセット印刷のほうが品質がよいですが、近年では印刷技術向上によりオンデマンド印刷でも十分な品質を得られるケースがあります。
とくに品質については印刷所の腕の見せ所といえます。紙の種類も多数あるため詳細を知りたい場合は印刷所に相談するとよいでしょう。
だれもが最初から熟練者ではありません。はじめての人の相談にも快く応じてくれます。

納期という観点ではオンデマンド印刷よりオフセット印刷のほうが締切が早めです。版を作り、インクを定着させる工程があるためです。

TechBoosterが過去に遭遇した印刷所のルールは次のとおりです。驚かすつもりはありません。転ばぬ先の杖です。印刷所選びに不安があれば日光企画やねこのしっぽを使うとトラブルなく入稿できる可能性が高くなります。

 * 表紙データ：表紙は本文と別の形式で入稿する
 * ページ数：紙の消費単位の関係で4の公倍数とするなど制約がある
 * ノンブル：全ページ通し番号が必要
 * レイアウト：余裕を持った小口（余白）を設定する
 * @<kw>{奥付,おくづけ}：書誌情報には印刷所表記を行う

技術書であれば表紙がカラー、本文がモノクロであるケースがほとんどです。表紙と本文については後述の節でフォローしていきます。

==[column] 印刷部数の決定

一番の悩みどころである印刷部数については売れて欲しい部数の８掛けぐらいちょうどいいでしょう。
鉄則は頒布する必要最低限だけ印刷して在庫を持たないことです。８掛けであれば予測を外しても大量には残らない数です。

同人誌においては新刊がもっとも売れます。残った在庫は既刊と呼ばれ、
新刊ほどの勢いはありません。新刊と比較しておおよそ２０～５０％弱の頒布になります。

サークルごとに部数の指標は違いますが、TechBoosterは１５００～２０００部を用意してます。
日光企画の場合はオンデマンド印刷、オフセット印刷どちらでもPDF入稿が可能です。
つまり本書で紹介している手法で出力したらそのまま入稿形式となり、完璧！というわけです。便利ですね。

==[/column]

== 表紙データの作成方法

印刷所ごとのフォーマットに合わせて表紙を作成します。フォーマットはAdobe PhotoshopのPSDファイル形式です。
イラストと表紙用の装丁をおこない、入稿用データを作成します（@<img>{hyoushi}）。

//image[hyoushi][入稿データの一例]{
//}

入稿ファイルのサイズは表紙１（表）と表紙４（裏）に本の厚みである背幅を足した横幅が最低限必要です。
あとは断ち切りのための遊びがどれぐらい必要かなども印刷所に確認しておきます。

背幅は紙の厚さとページ数で決まります。日光企画さんの標準的なセットでは0.063mm/ページで計算できます。背幅は表紙も含めたページ数なので本文128ページであれば表紙をいれると132ページなので背幅は8.316mmだとわかります。ちなみに表紙は表紙１〜表紙４と呼び、ページ数に含めます。本の内側に来る表紙２、表紙３は通常なにも印刷せず白い紙のままです。

TechBoosterではデザイナーさんとイラストレーターさんが協力して表紙を作成しています。
編集者が双方に書籍のイメージを伝えて構図を固めていきます。書籍の魅力を最大限引き出す表紙にしましょう。手に取ってもらってはじめて読まれるのですから。

印刷所によってはAdobe IllustratorのAIファイル形式でも大丈夫だったり、利用できるソフトウェアのバージョン指定があったりします。表紙のフォーマット（テンプレート）も違うのでよく確認してからとりかかりましょう。

@<kw>{トンボ,断ち切り位置}までの紙面の余白、いわゆる@<kw>{塗り足し}は概ね3mmあれば十分です。機械で紙を切る際は微妙にずれるためギリギリ端っこに文字や大事なデザインを配置することは避けましょう。
裁断位置が大きくずれることはめったにありませんが安全マージンを設計するのも制作者の努めです。1～3mm程度の余白は想定してください。

== 本文データの作成方法（入稿用）

本文データはPDFファイル形式で入稿します。万全を期すならAdobe Acrobat Proが必要@<fn>{adobe}です。
ほとんどのケースでは、GitHubリポジトリでGitHub ActionsのRe:VIEW-build-artifact-actionを使って生成したPDFファイルが使えます。
最近は作ったPDFファイルをそのまま印刷所に渡して入稿完了というお手軽な事例も沢山出ているので、本文の制作難易度は下がってきています。

//footnote[adobe][表紙データの作成にもAdobe Photoshopを使うので潔くCreative Cloudのコンプリート月々プランでの契約が覚悟の決め方です]

TechBoosterが日光企画さんに入稿する事例では次のように進めています。
ローカルPC上にRe:VIEWの実行環境がある場合は次のコマンドで入稿用のPDFを出力できます。PDFファイルの出力にRe:VIEW-build-artifact-actionを使っている場合は次のコマンドは読み飛ばして構いません。push時にPDFを自動生成しています。

//cmd{
review-pdfmaker config.yml
//}

テンプレートリポジトリのデフォルト設定ではB5 JISサイズ、トンボありで出力します。
基本的にページ数が４の倍数になるように揃えて入稿します。ならない場合は無理やり白いページを挟むこともあります。

またページごとにノンブル（ページの通し番号）は、たとえ白いページであっても必ず番号をいれます。同人誌以外では見ない制約ですし、印刷所によっても異なります。
乱丁を防ぐ意図もありますがページ数が分かると純粋に参照しやすいのも事実です。
ノンブル不要な印刷所であっても念のため入れておくのもよいでしょう。なおノンブルのレイアウトは紙面の下側が一般的です。

//image[nombre][ノンブル位置の例]{
//}

本の紙面は綴じている側（本の中心）の余白をノドと呼び、左右の端側の余白を小口と呼びます。本を読むとき、小口と地に指がかかりやすいため、わたしたちの提供するレイアウトでは見やすいよう余裕を持った設定をしています。

本を作るには凝ったものを作りたいという気持ちも否定しません。しかし最初のうちはぐっと我慢してデフォルトレイアウトの利用を推奨します。
ノンブルに限らず、レイアウトのカスタマイズには多くの落とし穴があります。
印刷所によっては、PDF形式での入稿が行えない（画像として出力する必要がある）、トンボが必要である（なくても受け付けてくれるケースも）、隠しノンブルに対応できるなど条件が異なります。

== 本文データの作成方法（電子書籍用）

入稿用の本文データにはトンボが含まれており、読者に提供するには不適切です。ここではPC等での閲覧を目的とした電子書籍用のPDFファイルも作りましょう。

 1. @<tt>{config.yml}を変更し、保存する
 2. GitHub Actionsや@<code>{review-pdfmaker}でPDFファイルを出力する

はじめに@<tt>{articles/config.yml}を紙面レイアウトから電子書籍向けレイアウトに変更します（@<list>{config_ebook}）。

//list[config_ebook][articles/config.yml - 電子書籍用レイアウトに変更する]{

# B5の設定(10pt 40文字×35行) - 紙版
# texdocumentclass: ["review-jsbook", "media=print,paper=b5,serial_pagination=true,
  hiddenfolio=nikko-pc,openany,fontsize=10pt,baselineskip=15.4pt,line_length=40zw,
  number_of_lines=35,head_space=30mm,headsep=10mm,headheight=5mm,footskip=10mm"]
# B5の設定(10pt 40文字×35行) - 電子版
texdocumentclass: ["review-jsbook", "media=ebook,paper=b5,serial_pagination=true,
  openany,fontsize=10pt,baselineskip=15.4pt,line_length=40zw,number_of_lines=35,
  head_space=30mm,headsep=10mm,headheight=5mm,footskip=10mm"]
//}

@<tt>{config.yml}ファイル内の設定項目@<code>{texdocumentclass}を紙版から電子版の設定へ変更します。サンプルでは@<code>{#}を行頭に追加して紙版をコメントアウトし、次行の電子版を有効化しています。
ポイントは@<code>{media=print}と@<code>{media=ebook}の違いです。ここでトンボを出し分けています。

ローカルPC上にRe:VIEWの実行環境がある場合は次のコマンドで入稿用のPDFを出力できます。
//cmd{
review-pdfmaker config-ebook.yml
//}

電子書籍用のPDFファイルでは、トンボの有無だけではなくメタデータを追加しており、たとえばPDFのしおり機能で目次から本文へジャンプできるなど利便性に優れます。

==  本文データの作成方法（電子書籍への最適化）

紙版と電子書籍どちらも同じPDFファイルなのに何が違うんだと感じるでしょう。指摘はもっともです。論より証拠、比較画像を用意しました（@<img>{ebook}）。

//image[ebook][紙面レイアウト（左）と電子書籍用レイアウト（右）]{

//}

大きな違いはフォントと余白です。紙面ではのりで本を綴じるため、手で持って読むために余白を広く取ってあります。

一方の電子書籍用に最適化したレイアウトでは余白を最小限に、PCやスマートフォンで読みやすいようにフォントも変えています。
小さな違いにみえるかもしれませんが、快適に読むための工夫がたっぷり含まれています。

カラーで読める点、URLがリンクになる点などは電子書籍のメリットですね。

電子書籍への最適化手順は次のとおりです。

 1. @<tt>{config.yml}を変更し、保存する
 2. GitHub Actionsや@<code>{review-pdfmaker}でPDFファイルを出力する

@<tt>{articles/config.yml}を電子書籍に最適化したレイアウトに変更します（@<list>{config_viewer}）。

//list[config_viewer][電子書籍用レイアウトに変更する]{
# LaTeX用のスタイルファイル(styディレクトリ以下に置くこと)
# texstyle: ["reviewmacro"]
texstyle: ["viewermacro"]

# A4の設定(14pt 42文字×32行) - 電子版
texdocumentclass: ["review-jsbook", "media=ebook,paper=a4,serial_pagination=false,
      oneside,fontsize=14pt,line_length=42zw,number_of_lines=32,head_space=22mm"]
//}

@<code>{texstyle}および@<code>{texdocumentclass}を変更しています。
もし表紙があるなら@<code>{coverimage}も設定しておきましょう。

@<code>{viewermacro}は専用のレイアウトファイルです。TechBoosterではRe:VIEW標準のレイアウトを拡張しています。
TeXの知識が求められるので大変ですが、読みやすいので頑張ってメンテナンスを続けている秘伝のタレです。

ローカルPC上にRe:VIEWの実行環境がある場合は@<code>{review-pdfmaker}コマンドでビルドします。

//cmd{
review-pdfmaker config.yml
//}

成功したら@<tt>{bookname.pdf}ファイルが得られます。念のため、後述の方法でフォントが埋め込まれているか確認しておいてください。
フォントが埋め込まれていない場合は、表示時に代替フォントが利用されます。読む端末に依存するため文字化けのリスクが格段に高くなります。特にモバイル端末では崩れやすいです。

なおTechBoosterでは電子書籍用レイアウトと紙面レイアウトが同じ横幅（つまり1行の文字数が一緒）になるように調整しています。
電子書籍用レイアウトのPDFを作ってもソースコードの折り返しを気にしなくていいので評判@<fn>{good}です。
@<tt>{config.yml}以外の本文（@<tt>{.re}ファイル）もメンテナンスフリーであればいいのですが、表や本文中のURLなどで折り返しが上手くいかないケースにも遭遇します。次に示すのはレイアウトを変えた場合に遭遇する主な事象です。

//footnote[good][著者＝発行者なので自画自賛していることになるが気にしない]

 * 本文やURLのはみ出しがある（特に図表、リスト、脚注で顕著）
 * リンクが想定どおりの挙動をしない
 * 画像サイズが意図と異なり、想定した見栄えにならない（画像の微調整が必要）
 * ページ送りの場所などレイアウトが異なる

最適化した場合には印刷に関わる設定以外も大きく変わっています。そのため改行位置やページ数など本文に関わる見栄えが大きく違います。
出力できたからといってチェックしないのはよくありません。品位を上げるためにはPDFファイルを確認しながらの微調整が必要です。
近年はタブレットだけでなくスマートフォンで閲覧する読者も増えており、画像サイズや図表は細かく調整することを推奨します。

== EPUB（リフロー）を発行する

EPUBは電子書籍ファイルフォーマット規格のひとつです。多くのEPUBリーダーが普及しています（@<img>{epub_reader}）。

//image[epub_reader][EPUBリーダーのApple Books][scale=0.75]{

//}

紙やPDFの書籍と異なり、フォントサイズをユーザが自由に変更できる利点があります。
Re:VIEWはEPUB3フォーマットで出力可能です。

レイアウトはリーディング環境（EPUBリーダー）に合わせて変化するためページの概念がありません。
またフォントサイズが可変な特性上、ソースコードの折り返しが制御できない点は覚えておいてください。

技術書の内容でEPUBが向くものと向かないものはっきりと別れる傾向があります。

EPUBとPDFはフォーマットの違いから設定できる項目にも違いがあります。@<tt>{config.yml}の設定を抜粋します（@<list>{epub_config}）。

//list[epub_config][config.yml - EPUBの設定（抜粋）]{
epubmaker:
  # HTMLファイルの拡張子
  htmlext: xhtml
  stylesheet: ["epub_style.css", "epub_style.scss"]
//}

@<code>{epubmaker}に続く設定はEPUBフォーマット専用の項目です。PDF等と共用できるものは引き継いでいるので安心してください。
ただしEPUBの設定項目は専門的な知識が求められるので、変更する場合は表紙を最初のページとして表示するか決める@<code>{cover_linear}ぐらいに留めておいてください。
フォーマットごとに出力し、複数の成果物を管理するのは想像異常に大変です。慣れてきたり、必要に迫られたら考えましょう。

GitHub ActionsのRe:VIEW-build-artifact-actionは現時点でEPUB出力に対応していません。
ローカルPC上にRe:VIEWの実行環境を用意して@<code>{review-epubmaker}コマンドでビルドしてください。

ビルドするためのコマンドは次のとおりです。

//cmd{
review-epubmaker config.yml
//}

成功したら@<tt>{bookname.epub}ファイルを出力します。EPUBファイルはApple Books等で表示してみましょう（@<img>{epub}）。

//image[epub][Apple Booksでの読書例]{

//}

EPUBリーダーで柔軟にレイアウトし、読者の環境に合わせて読める特徴は他のフォーマットにない利点です。
世の中にはApple Books以外のEPUBリーダーも存在しています。それぞれのリーダーで表示が異なるため、可能な限り多くの電子ブックアプリで動作確認してください。
これはPDFとEPUBのフォーマットの違いをよく表しています。EPUBはレイアウトやフォントサイズなどの表示品質はリーダーに委ねているのです@<fn>{why_epub}。

//footnote[why_epub][委ねたほうがデバイスや読者の要望ごとに最適な読書環境が提供できるとの考えからです]

== 入稿の品質を高めるために

2023年現在、執筆環境としてのRe:VIEWが浸透し、印刷所への入稿もノウハウの蓄積が進んでいます。本節ではより高品位なデータ生成のために次の３つのトピックを扱っています。

 1. フォントの埋め込み確認
 2. PDFファイルのフォーマット変換
 3. 画像等のモノクロ化

#@# prh:disable
実は３つともReVIEW-Templateリポジトリをデフォルトで使っている限り、ほぼ気にしなくていい内容です。
ひとつめのフォントの埋め込み確認は入稿時の確認という意味では必須です。しかし残りのふたつは印刷所のノウハウ蓄積もありほぼ問題にならなくなりました。少なくとも技術書典のバックアップ印刷所では作業の必要はありません。

なぜ紹介しているかというとPDFファイルのフォーマット変換は入稿トラブルの予防を目的にしており、画像等のモノクロ化は、本文印刷での品質を向上させる目的で行っているからです。TechBoosterでは入稿時にはベタ部分での色ムラがでないようにモノクロでの微調整を実施しているほか、文字がきれいに黒く表示できるように色を調整しています。

=== フォントの埋め込み確認

ここではフォントの埋め込み設定を確認するためにAdobe Acrobat Reader@<fn>{reader}を使います。無料のPDF閲覧ソフトです。PDFファイルを開き、文書のプロパティで埋め込みフォントと表示があれば成功です（@<img>{font}）。

//image[font][埋め込みフォント][scale=0.75]{
//}

自分でフォントを差し替えた場合、設定ミス等でうまく埋め込まれてないがローカル環境では表示できてしまうケースが見受けられるため入稿やPDFファイルの配布前には必ず確認します。

//footnote[reader][@<href>{https://www.adobe.com/jp/acrobat/pdf-reader.html}]

=== PDFフォーマットをPDF/Xに変換

PDFファイルと一口にいっても単純じゃありません。そこは長い歴史をもつPDFさんのことです。
多数のバージョンが存在しています。TeXに続く深淵です。

PDFファイルであれば大丈夫じゃないのと感じるかもしれませんが、すべてのPDF変換ソフトが正しく検証されたPDFフォーマットに変わっている保証はありません。残念ながら文字化けや印刷用の業務ソフトで読み込むとエラーとなるような不正規ファイルが生まれることがあります。

印刷所への入稿を考えるとPDF/Xフォーマットがもっとも安全です。
印刷会社へ入稿する際の統一フォーマットですが、出力できるソフトは限られており、ここから先はAdobe Acrobat Proでの操作です。

ツールから印刷工程を選ぶと次のサイドメニューが表示されます（@<img>{pdfx}）。

//image[pdfx][PDF/Xとして保存する（画面右サイドメニュー中）]{
//}

メニューの中のPDF/Xとして保存するを選んで別名で保存してください。このとき目次のハイパーリンクなど付加情報は保存されませんが、これは仕様@<fn>{engineer}です。

//footnote[engineer][エンジニアは仕様といわれると弱い]

=== 原稿のモノクロ化

入稿の最終段階です。作成したPDFデータをモノクロ化します。モノクロ化にあたってはPDF/Xフォーマットであることが前提ですので、前述のフォーマット変換作業を忘れずに行なってください。

ツールから印刷工程を選ぶと色を置換というサイドメニューが出ます（@<img>{pdfx}のPDF/Xとしての保存の２つ上です）。

ここではオブジェクトのうち、DeviceCMYKカラータイプのプロファイルを変換します（@<img>{replace-color}、@<img>{replace-color-dot-gain}）。

//image[replace-color][色を置換では、DeviceCMYKを選択する]{
//}

//image[replace-color-dot-gain][カラーを出力インテントに変換をチェック]{
//}

@<strong>{カラーを出力インテントに変換}にチェックをいれて、@<strong>{Dot Gain 15%}を選択します。
また変換のオプションで@<strong>{黒を維持}もチェックします。

この設定で色を置換すると無事、モノクロ化できます。ここまでで本文の入稿データ作成は完了です。

本手法に限らずモノクロ変換の際には、カラー画像の際にはまったく違う色だったものが同じような色味に変わってしまうケースがあります。図やグラフでありがちなのでモノクロで見ても視認性が高く保たれているかという観点で変換後のPDFファイルを確認してください。
